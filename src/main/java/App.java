import java.lang.reflect.Array;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        String res = new String();
        Double total = 0.0;
        // key: Id ,value: 单个商品总价
        HashMap<String, Double> isPromotion = new HashMap<>();
        res += "============= Order details =============\n";
        // 获得总价
        for (String input : inputs) {
            String food[] = input.split(" ");
            String foodId = food[0];
            Integer foodNum = Integer.parseInt(food[2]);
            String foodName = "";
            Double foodPrice = 0.0;
            for (Item item : itemRepository.findAll()) {
                if (item.getId().equals(foodId)) {
                    foodName = item.getName();
                    foodPrice = item.getPrice();
                    break;
                }
            }
            total += foodNum * foodPrice;
            isPromotion.put(foodId, foodNum * foodPrice);
            res += foodName + " x " + foodNum + " = " + Double.valueOf(foodNum * foodPrice).intValue() + " yuan\n";
        }

        // 执行促销规则
        for (SalesPromotion salesPromotion : salesPromotionRepository.findAll()) {
            Boolean flag = false;
            Double save = 0.0;
            ArrayList<String> discount = new ArrayList<>();
            if (salesPromotion.getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")) {
                for (String relatedItem : salesPromotion.getRelatedItems()) {
                    if (isPromotion.containsKey(relatedItem)) {
                        Double price = isPromotion.get(relatedItem);  //根据key获取value
                        save += 0.5 * price;
                        discount.add(getNamebyId(relatedItem));
                    }
                }
                // 比较使用哪一种规则
                if (Double.valueOf(save).intValue() > 6){
                    flag = true;
                }
                if (flag){
                    total -= save;
                    res += "-----------------------------------\n";
                    res += "Promotion used:\n";
                    res += salesPromotion.getDisplayName() + " (";
                    for (int i = 0; i < discount.size(); i++) {
                        res += discount.get(i);
                        if (i != discount.size() - 1){
                            res += "，";
                        }
                    }
                    res += ")，saving " + Double.valueOf(save).intValue() + " yuan\n";
                }
            }
        }

        for (SalesPromotion salesPromotion : salesPromotionRepository.findAll()) {
            if (salesPromotion.getType().equals("BUY_30_SAVE_6_YUAN")) {
                if (Double.valueOf(total).intValue() >= 30){
                    total -= 6;
                    res += "-----------------------------------\n";
                    res += "Promotion used:\n";
                    res += "满30减6 yuan，saving 6 yuan\n" ;
                }
            }
        }

        res += "-----------------------------------\n";
        res += "Total：" + Double.valueOf(total).intValue() + " yuan\n";
        res += "===================================";
        return res;
    }
    public String getNamebyId(String Id){
        for (Item item : itemRepository.findAll()) {
            if (item.getId().equals(Id)) {
                return item.getName();
            }
        }
        return null;
    }

}
